{"ast":null,"code":"import{combineReducers}from\"redux\";var initialState={ProductList:[]};function appReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;var stateCopy=JSON.parse(JSON.stringify(state));switch(action.type){case\"addProduct\":return addToList(stateCopy,action.payload);default:return stateCopy;}}var rootReducers=combineReducers({appReducer:appReducer});export default rootReducers;var addToList=function addToList(state,data){var newProductList=state.ProductList.slice();newProductList.push(data);state.ProductList=newProductList;return state;};","map":{"version":3,"sources":["/Users/macbookpro/Desktop/My-Work/My-Work-Space/SellOne (React, Redux)/src/redux/stateReducer.js"],"names":["combineReducers","initialState","ProductList","appReducer","state","action","stateCopy","JSON","parse","stringify","type","addToList","payload","rootReducers","data","newProductList","slice","push"],"mappings":"AAAA,OAASA,eAAT,KAAgC,OAAhC,CAEA,GAAIC,CAAAA,YAAY,CAAG,CACjBC,WAAW,CAAE,EADI,CAAnB,CAIA,QAASC,CAAAA,UAAT,EAAkD,IAA9BC,CAAAA,KAA8B,2DAAtBH,YAAsB,IAARI,CAAAA,MAAQ,2CAChD,GAAIC,CAAAA,SAAS,CAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeL,KAAf,CAAX,CAAhB,CACA,OAAQC,MAAM,CAACK,IAAf,EACE,IAAK,YAAL,CACE,MAAOC,CAAAA,SAAS,CAACL,SAAD,CAAYD,MAAM,CAACO,OAAnB,CAAhB,CACE,QACF,MAAON,CAAAA,SAAP,CAJJ,CAMD,CAED,GAAMO,CAAAA,YAAY,CAAGb,eAAe,CAAC,CACnCG,UAAU,CAAVA,UADmC,CAAD,CAApC,CAIA,cAAeU,CAAAA,YAAf,CAEA,GAAIF,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACP,KAAD,CAAQU,IAAR,CAAgB,CAC9B,GAAIC,CAAAA,cAAc,CAAGX,KAAK,CAACF,WAAN,CAAkBc,KAAlB,EAArB,CACAD,cAAc,CAACE,IAAf,CAAoBH,IAApB,EACAV,KAAK,CAACF,WAAN,CAAoBa,cAApB,CACA,MAAOX,CAAAA,KAAP,CACD,CALD","sourcesContent":["import { combineReducers } from \"redux\";\n\nlet initialState = {\n  ProductList: []\n}\n\nfunction appReducer(state = initialState, action) {\n  let stateCopy = JSON.parse(JSON.stringify(state))\n  switch (action.type) {\n    case \"addProduct\":\n      return addToList(stateCopy, action.payload)\n        default:\n      return stateCopy\n  }\n}\n\nconst rootReducers = combineReducers({\n  appReducer\n})\n\nexport default rootReducers;\n\nlet addToList = (state, data)=> {\n  let newProductList = state.ProductList.slice()\n  newProductList.push(data)\n  state.ProductList = newProductList;\n  return state;\n}\n"]},"metadata":{},"sourceType":"module"}